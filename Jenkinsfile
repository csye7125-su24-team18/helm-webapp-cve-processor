pipeline {
    agent any
    environment {
        GITHUB_PAT = credentials('github_pat')
        DOCKER_CREDS = credentials('dockerhub-credentials')
        DOCKER_REGISTRY = 'hsa404/assignments'
    }

    stages {

        stage('Check Commit Message') {
            when{
                not{
                    branch 'main'
                
                }
            }
              
            steps{
                script{
                    String commitMessage = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                    def conventionalCommitRegex = /^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|\w+)(\(.+\))?: .{1,}$/

                    if (!commitMessage.matches(conventionalCommitRegex)) {
                        error "Commit message '${commitMessage}' does not follow the conventional commit format"
                    }
                }
                
            }
            
        }
   
        stage ('Check Linting') {
            steps {
                script {
                    def lintResult = sh(script: 'helm lint .', returnStatus: true)
                    if (lintResult != 0) {
                        error 'Helm lint failed'
                    }
 
                    // Run helm template
                    def templateResult = sh(script: 'helm template .', returnStatus: true)
                    if (templateResult != 0) {
                        error 'Helm template failed'
                    }
                }
            }
        }    

        stage('Release'){
            when{
                branch 'main'
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'github_pat', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GH_TOKEN')]) {
                    sh """
                        npm install @semantic-release/changelog @semantic-release/git semantic-release-helm @semantic-release/exec
                        npx semantic-release
                    """
                }
            }
        }

//            stage('Helm Release') {
//              when{
//                 branch 'main'
//             }
//             steps {
//                 script {
                    
//                     def newVersion = sh(script: 'npx -c "echo \$npm_package_version"', returnStdout: true).trim()
//                     // Update Chart.yaml
//                     sh """
//                         sed -i 's/version: .*/version: ${newVersion}/' Chart.yaml
//                     """

//                     // Package Helm chart
//                     sh """
//                         helm package helm-webapp-cve-processor --destination dist
//                         zip -r helm-${newVersion}.zip dist/helm-webapp-cve-processor-${newVersion}.tgz
//                     """

//                     // Create or update GitHub release
//                     withCredentials([usernamePassword(credentialsId: 'github_pat', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GH_TOKEN')]) {
//                         sh """
//                             git config user.email "agrawal.harsh@northeastern.edu"
//                             git config user.name "harshneu404"
//                             git remote set-url origin https://${GIT_USERNAME}:${GH_TOKEN}@github.com/csye7125-su24-team18/webapp-cve-processor
//                             gh release create v${newVersion} -t "Release v${newVersion}" -n "Release v${newVersion}" helm-${newVersion}.zip
//                         """
// }
//                 }
//             }
//         }
        stage ('Cleanup') {
            steps {
                echo "Cleaning up the code"
            }
        }

    
    }
}

